/**
 * JEvents Component for Joomla 1.5.x
 *
 * @version     $Id: jicaleventrepeat.php 1631 2009-11-26 05:38:33Z geraint $
 * @package     JEvents
 * @copyright   Copyright (C) 2008-2015 GWE Systems Ltd, 2006-2008 JEvents Project Group
 * @license     GNU/GPLv2, see http://www.gnu.org/licenses/gpl-2.0.html
 * @link        http://www.jevents.net
 */
var jevcfFieldTypes = new Object();


var jevcfforms = {
    Version: '1.0.0',
    forms: {},
    initialized: false,
    language: 'english',
    debugging: false,
    // how many balance Elements are defined
    settingUpBalanceElements: false,
    balanceElements: 0,
    //   Routine to handle errors generated by jevcfforms.
    //
    //  A javascript error object contains two fields: type and message.
    //  Predefined Types:
    //  EvalError, RangeError, ReferenceError, SyntaxError, TypeError
    //  and URIError

    handleError: function (errorObj) {
        if (jevcfforms.debugging)
            alert('jevcfforms Error :: ' + errorObj.message);
        // trigger the error (as it might be handled by window.onerror)
        throw(errorObj);
    },
    handleWarning: function (warningObj) {
        try {
            if (jevcfforms.debugging)
                window.console.log('jevcfforms Warning :: ' + warningObj.message);
        } catch (errorObj) {
        }
    },
    setupOpenResponse: function () {
        jQuery('.jevcffield').each(function (i, el) {
            jQuery(el).on('click', function (event) {
                if (jQuery(event.target).hasClass("sortable-handler")) {
                    return;
                }
                jevcfforms.highlightField(el.id);
            });
            var deleteButton = jQuery('#deleteFieldButton' + el.id);
            if (deleteButton.length)
                deleteButton.on('click', function () {
                    jevcfforms.deleteField(el.id)
                });
        });
        jevcfforms.setupSortableFields();
        jevcfforms.fieldsHaveReordered();
    },
    createNewFieldGroup: function () {
        jevcflastfieldsetclone = jQuery(".jevcflastfieldset").clone();
        jevcflastfieldsetclone.removeClass("jevcflastfieldset");
        jQuery(".jevcflastfieldset").before(jevcflastfieldsetclone);
        // Now setup the resonses required 
        jevcfforms.setupEditFieldsets();

    },
    createNewField: function (fieldtype) {
        if (!fieldtype){
            fieldtype = jQuery("#templatetype").val();
        }
        fieldhtml = jevcfFieldTypes[fieldtype];
        var id = jevcfforms.uniqId('field');
        var newDiv = jQuery("<div>").addClass('jevcffield').prop('id', id);
        fieldhtml = fieldhtml.replace(/###/g, id);
        newDiv.html(fieldhtml);

        newDiv.on('click', function (event) {
            if (jQuery(event.target).hasClass("sortable-handler")) {
                return;
            }
            jevcfforms.highlightField(id);
        })
        // update the label preview
        newDiv.find('.jevcffl').on('change', function () {
            jQuery('#pl' + id).html(this.value);
            conditionalEditorPlugin.updateNameLabel(id);
        });
        newDiv.find('.jevcffn').on('change', function () {
            conditionalEditorPlugin.updateNameLabel(id);
        });
        // add new element to last fieldset of fields
        jQuery('#jevcffields .jevcffieldset').not('.jevcflastfieldset').last().append(newDiv);

        var deleteButton = jQuery('#deleteFieldButton').clone();
        deleteButton.prop(id, 'deleteFieldButton' + id);
        deleteButton.css('display', 'block');
        deleteButton.on('click', function () {
            jevcfforms.deleteField(newDiv.prop('id'))
        });
        newDiv.prepend(deleteButton);

        newDiv.prepend(jQuery('<span class="sortable-handler" style="cursor: move;float:left;margin:10px 10px 0px 0px;"><i class="icon-menu"></i></span>'));

        newDiv.append(jQuery('<input class="fieldsetmap" type="text" name="fieldsetmap['+id+']" value="">'));
        
        // make shure this field is highlighted and others not
        jevcfforms.highlightField(id);
        jevcfforms.setupSortableFields();
        jevcfforms.fieldsHaveReordered();

        if (conditionalEditorPlugin) {
            conditionalEditorPlugin.update(id, '', true);
            jevcfforms.setupConditionalOptions();
        }

        jQuery('select').chosen({
            disable_search_threshold: 10,
            allow_single_deselect: true
        });

        setupJEVCFTemplateBootstrap();
        
        // Make sure the field is visible to edit
        jQuery('html, body').animate({	scrollTop: jQuery("#" + id).offset().top-100	}, 200);
        
        return id;
    },
    deleteField: function (id) {
        jQuery("#" + id).off();
        jQuery("#" + id).remove();
    },
    highlightField: function (id) {
        $el = jQuery("#" + id);
        $el.css('border-width', "1px");
        $el.find(".jevcffieldinput").css('display', 'block');
        $el.find('.deleteFieldButton').css('display', 'block');
        jQuery('#' + id + "preview").addClass('previewright');
        jevcfforms.hideInactiveFields(id);
    },
    setupEditFieldsets: function () {
        jQuery(".jevcffieldset .fieldsetlabel input").each(function (i, el) {
            jQuery(el).on("change", function () {
                var flel = jQuery(el).closest(".fieldsetlabel");
                // Change the text label
                flel.find("span.fieldsetname").text(jQuery(el).val());
                // Now change the mappings
                flel = jQuery(el).closest(".jevcffieldset");
                flel.find(".fieldsetmap").val(jQuery(el).val());

            });
        });
        jQuery(".jevcffieldset img.editimg").each(function (i, el) {
            jQuery(el).on("click", function () {
                // Enable editing on the current tab
                var fieldsetlabel = jQuery(this).closest(".fieldsetlabel");
                fieldsetlabel.uniqueId();
                fieldsetlabel.find("span.fieldsetname").css("display", "none");
                fieldsetlabel.find("img.editimg").css("display", "none");
                fieldsetlabel.find("input").css("display", "inline-block");
                fieldsetlabel.find(".fieldsetdescription").css("display", "block");

                // Disable editing on the other tabs
                var allfieldsetlabels = jQuery("#jevcffields .fieldsetlabel");
                allfieldsetlabels.each(function (fli, flel) {
                    flel = jQuery(flel);
                    flel.uniqueId();
                    if (flel.attr("id") != fieldsetlabel.attr("id")) {
                        flel.find("span.fieldsetname").css("display", "inline-block");
                        flel.find("img.editimg").css("display", "inline-block");
                        flel.find("input").css("display", "none");
                        flel.find(".fieldsetdescription").css("display", "none");
                        flel.find("span.fieldsetname").text(flel.find("input").val());
                        flel.find(".fieldsetmap").text(flel.find("input").val());
                    }
                });
            })
        });
        // Delete empty fieldsets
        jQuery(".jevcffieldset img.deleteimg").each(function (i, el) {
            jQuery(el).on("click", function () {
                flel = jQuery(el).closest(".jevcffieldset");
                // Offer the icon when no fields in the fieldset
                if (flel.find(".jevcffield").length == 0 || (flel.find(".jevcffield").length == 1 && flel.find(".jevcffield").hasClass("jevcflastfield"))) {
                    flel.remove();
                }
            });
        });

    },
    hideInactiveFields: function (id) {
        // must un-highlight all the other fields
        jQuery('.jevcffield').each(function (i, el) {
            if (el.id != id) {
                $el = jQuery(el);
                $el.css('border-width', "0px");
                $el.find(".jevcffieldinput").css('display', 'none');
                $el.find('.deleteFieldButton').css('display', 'none');
                jQuery('#' + el.id + "preview").removeClass('previewright');
            }
        });
    },
    setupConditionalOptions: function () {        
        var jevcfbooleanfield = jQuery("#jevcffields .jevcffl_label[rel=jevcfboolean], #jevcffields .jevcffl_label[rel=jevcfradio]");
        if (jevcfbooleanfield.length) {
            jQuery(".jevcfconditional").css("display", "block");
        } else {
            jQuery(".jevcfconditional").css("display", "none");
        }
    },
    uniqId: function (prefix) {
        var newDate = new Date();
        return prefix + newDate.getTime();
    },
    setupSortableFields: function () {
        jevcfforms.sortablefields = jQuery('#jevcffields ').sortable(
                {
                    "update": jevcfforms.fieldsHaveReordered,
                    handle: ".sortable-handler",
                    items: " div.jevcffield"
                }
        );

        jevcfforms.sortablefieldsets = jQuery('#jevcffields').parent().sortable(
                {
                    "update": jevcfforms.fieldsetsHaveReordered,
                    handle: ".sortable-handler",
                    items: "fieldset.jevcffieldset"
                            // Amending Cancel seems to cause problems! i.e. the drag/drop doesn't work
                            //,cancel: "input,textarea,button,select,option,img,div"
                            // This causes problems too
                            //items : " fieldset.jevcffieldset"//:not(fieldset.jevcfdefaultfieldset)"                                
                }
        );

    },
    fieldsetsHaveReordered: function (event, ui) {
    },
    fieldsHaveReordered: function (event, ui) {

        // if moving into a fieldset with no name then cancel the action
        if (ui) {
            var item = jQuery(ui.item);
            flel = item.closest(".jevcffieldset").find(".fieldsetlabel input");
            if (jQuery.trim(flel.val()) == "") {
                jQuery('#jevcffields ').sortable('cancel');
            }
        }

        var order = 0;
        jQuery('.jevcffield').each(function (i, el) {
            var ordering = jQuery('#ordering' + el.id);
            if (ordering)
                ordering.val(order);
            order++;

            // Set the fieldsetmap field
            var fieldsetmap = jQuery(el).closest(".jevcffieldset").find('input').val();
            jQuery(el).find(".fieldsetmap").val(fieldsetmap);

            //alert(jQuery(el).closest(".jevcffieldset").length + " "+fieldsetmap +" "+jQuery(el).find(".fieldsetmap").length);
        });
        // if there are no more fields in a fieldset then make the delete icon visible
        jevcfforms.displayDeleteFieldGroupIcon();
    },
    displayDeleteFieldGroupIcon: function () {

        var allfieldsets = jQuery("#jevcffields .jevcffieldset");
        allfieldsets.each(function (fli, flel) {
            flel = jQuery(flel);
            // Offer the icon when no fields in the fieldset
            if (flel.find(".jevcffield").length == 0 || (flel.find(".jevcffield").length == 1 && flel.find(".jevcffield").hasClass("jevcflastfield"))) {
                flel.find("img.deleteimg").css("display", "inline-block");
            } else {
                flel.find("img.deleteimg").css("display", "none");
            }
        });
    },
    revealConditionalDisplayField: function (trigger, conditional, displayvalue)
    {
        if (typeof trigger == "string"){
            if (jQuery("#" + trigger + " input[type=radio]:checked").length) {
                if (typeof displayvalue == "undefined") {
                    displayvalue = 1;
                }
                if (jQuery("#" + trigger + " input[type=radio]:checked").val() == displayvalue) {
                    jQuery("." + conditional).css("display", "block");
                } else {
                    jQuery("." + conditional).css("display", "none");
                }
            }
        }
        else if (typeof trigger == "object"){
            var toBeDisplayed = false;
            jQuery(trigger).each (function(ixd, tgr){
                if (jQuery("#" + tgr + " input[type=radio]:checked").length) {
                    if (typeof displayvalue == "undefined") {
                        displayvalue = 1;
                    }
                    if (jQuery("#" + tgr + " input[type=radio]:checked").val() == displayvalue) {
                        toBeDisplayed = true;
                    } 
                }
            });
            if (toBeDisplayed){
                jQuery("." + conditional).css("display", "block");                
            }
            else {
                jQuery("." + conditional).css("display", "none");                
            }
        }
    },
}


var jevcfpro = {
    updateLabel: function (id) {
        jQuery('#pl' + id).html(jQuery('#fl' + id).val());
    },
    setName: function (id) {
        if (jQuery('#fn' + id).val() == "") {
            jQuery('#fn' + id).val(jQuery('#fl' + id).val().replace(/ /g, '_').replace(/\W/g, ''));
        }
    },
    cleanName: function (id) {
        jQuery('#fn' + id).val(jQuery('#fn' + id).val().replace(/ /g, '_').replace(/\W/g, ''));
    },
}

conditionalEditorPlugin = {
    update: function (fieldid, basefield, newfield) {
        if (fieldid=="###"){
            return;
        }
        //alert("update "+ fieldid +" basefield "+basefield);
        // Firstly handle situation where new conditional  field is added - can include boolean or radio types
        //var selects = jQuery(".cf");
        var selects = jQuery("#cf"+fieldid);
        selects.each(function (index, sel) {
            if (sel.id.substring(2) == fieldid) {
                // now add the new kids
                // look for the conditions (excluding the field itself)
                // only support boolean and radio base fields for now
                jQuery("#jevcffields .jevcffl_label[rel=jevcfboolean], #jevcffields .jevcffl_label[rel=jevcfradio]").each(function (i, el) {
                    // don't do the field itself
                    var val = el.id.substring(2);
                    if (val==fieldid) return;
                    var $nameEl=jQuery("#"+el.id.replace("flfield","fnfield"));
                    conditionalEditorPlugin.node(sel, el.value + " ("+$nameEl.val()+")", val, basefield);
                    conditionalEditorPlugin.updateSelection(sel.id);
                    
                });
            }
        });
        // only need this second block when adding a new field via JS 
        if (!newfield){
            return;
        }
        // secondly check for situation where we are adding a condition type i.e. boolean or radio field and need the other conditionals to be updated!
        var $el = jQuery("#"+fieldid).find(".jevcffl_label");
        var rel = $el.attr('rel');
        if (rel=="jevcfboolean" || rel=="jevcfradio"){
            
            selects = jQuery(".cf");
            selects.each(function (index, sel) {
                if (sel.id.substring(2) != fieldid) {
                    var val = $el.prop('id').substring(2);
                    var $nameEl=jQuery("#"+$el.prop('id').replace("flfield","fnfield"));
                    conditionalEditorPlugin.node(sel, $el.val() + " ("+$nameEl.val()+")", val, basefield);
                    conditionalEditorPlugin.updateSelection(sel.id);
                }
            });
            //var otherFields = jQuery("#jevcffields fields").not("#"+fieldid);
            //otherFields.find(".jevcffl_label").not("[rel=jevcfboolean]").not("[rel=jevcfradio]").each(function (i, el) {
            //    alert("c "+el.value);
            //});
        }



    },
    updateNameLabel: function (fieldid) {
        var $el = jQuery("#"+fieldid).find(".jevcffl_label");
        var rel = $el.attr('rel');
        if (rel=="jevcfboolean" || rel=="jevcfradio"){
            var selects = jQuery(".cf");
            selects.each(function (index, sel) {
                if (sel.id.substring(2) != fieldid) {
                    var val = $el.prop('id').substring(2);
                    var $nameEl=jQuery("#"+$el.prop('id').replace("flfield","fnfield"));
                    conditionalEditorPlugin.updateNode(sel, $el.val() + " ("+$nameEl.val()+")", val);
                }
            });

        }        
    },

    node: function (parent, label, val, basefield) {
        optnode = jQuery("<option>").val(val).text(label);
        
        jQuery(parent).append(optnode);
        if (val == basefield) {
            optnode.prop('selected', true);
            // Must also make the behaviour visible!
            jQuery(parent).closest('.jevcfconditional').find(".jevcfconditionalselector").css("display", "block");
        }
        jQuery(parent).trigger("chosen:updated");
	// old style version - still needed!
	jQuery(parent).trigger("liszt:updated");

    },
    updateNode: function (parent, label, val) {
        
        jQuery(parent).find("option[value="+val+"]").text(label);
        jQuery(parent).trigger("chosen:updated");
	// old style version - still needed!
	jQuery(parent).trigger("liszt:updated");

    },
    OLDupdateSelection: function (id) {
        if (jQuery('#' + id).find("option:selected").val() != "") {
            // Must also make the behaviour visible!
            jQuery('#' + id).closest('.jevcfconditional').find(".jevcfconditionalselector").css("display", "block");
        } else {
            // Must also make the behaviour hidden
            jQuery('#' + id).closest('.jevcfconditional').find(".jevcfconditionalselector").css("display", "none");
        }
    },
    updateSelection:function(id) {           
            var selectedVal = jQuery('#'+id).find("option:selected").val();
            if(selectedVal != ""){                   
                    // Must also make the behaviour visible!
                    var conditionalselector = jQuery('#'+id).closest('.jevcfconditional').find(".jevcfconditionalselector");
                    conditionalselector.css("display","block");

                    // Must set the values to match too!
                    // search for radio options to replace the default boolean values
                    var filtervalues = conditionalselector.find(".cfvfv");
                    if (!this.booleanoptions){
                        this.booleanoptions = filtervalues.find("option").clone();
                    }
                    filtervalues.find("option").remove().end();

                    var hiddencfvfv = jQuery("#hiddencfvfv"+id.substring(2)).val();

                    var optionvalues = jQuery("#options"+selectedVal).find('.jevoption_value');
                    if (optionvalues.length){
                        optionvalues.each (function (idx, ov) {                                
                            var id = ov.id.replace("_v_","_t_");
                            var label = jQuery("#"+id).val();
                            if (label!=""){
                                optnode = jQuery("<option>").val(jQuery(ov).val()).text(label);
                                if (hiddencfvfv == jQuery(ov).val()){
                                    optnode.attr("selected", true);
                                }
                                filtervalues.append(optnode);                            
                            }
                        });
                    }
                    else {
                        // else a boolean field 
                        this.booleanoptions.each (function (idx, bopt) {
                            optnode = jQuery("<option>").val(jQuery(bopt).val()).text(jQuery(bopt).text());
                            if (hiddencfvfv == jQuery(bopt).val()){
                                optnode.attr("selected", true);
                            }
                            filtervalues.append(optnode);                            
                            
                        });
                    }
                    filtervalues.chosen();
                    filtervalues.trigger("chosen:updated");
                    // old style version - still needed!
                    filtervalues.trigger("liszt:updated");

    }
            else {
                    // Must also make the behaviour hidden
                    jQuery('#'+id).closest('.jevcfconditional').find(".jevcfconditionalselector").css("display","none");
            }
    }
}

jQuery(document).ready(function () {
    jQuery("fieldset.jevmessages textarea").each(function (index, el) {
        jQuery(el).on('mousedown', function () {
            activeMessageField = el;
        });
    })
});

function setupForms() {
    try {
        jevcfforms.hideInactiveFields(0);
        jevcfforms.setupOpenResponse();
        jevcfforms.setupConditionalOptions();
        jevcfforms.setupEditFieldsets();
    } catch (e) {
    }

    if (jQuery("#newFieldButton").length) {
        jQuery("#newFieldButton").on("click", function () {
            jevcfforms.createNewField();
        });
    }
    if (jQuery("#newFieldGroupButton").length) {
        jQuery("#newFieldGroupButton").on("click", function () {
            jevcfforms.createNewFieldGroup();
        });
    }
}

jQuery(document).ready(function () {
    setupForms();
});



jQuery(document).ready(function ($) {
    // Setup click action on default option (which is translated)
    var defaultLI = jQuery("#dropdownUL_dropdownUL_customfields li a");
    jQuery("#fieldsdropdown a.dropdownpopover").each(function (index, item) {
        var info = "";
        title = "<div>" + jQuery(item).prop("data-title") + "</div>";
        var dropdowntarget = jQuery("#dropdownUL_customfields" );
        jQuery(item).on('click', function (event) {
            event.preventDefault();
            jevcfforms.createNewField(jQuery(item).attr("data-value"));
            //jQuery("#" + target).val(item.code);
        });
    });
    $('a.dropdownpopover').popover({container: 'body', trigger: 'hover', placement: 'right', html: true});
});
